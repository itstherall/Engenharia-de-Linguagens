/**
 * Uma árvore binária de busca generaliza a ideia de listas encadeadas crescentes.
 * Em uma árvore binária de busca, os nós têm um campo chave de um tipo
 * ordenável e apresentam as seguintes propriedades: para qualquer nó n, a chave
 * de n é maior ou igual à chave de qualquer nó na subárvore esquerda de n e
 * menor ou igual à chave de qualquer nó na subárvore direita de n. Implemente
 * uma árvore binária de busca com chaves de tipo inteiro e as seguintes operações:
 *
 * A) Transforme uma sequência de valores em uma árvore binária de busca.
 * B) Encontre a chave mínima da árvore, indicando seu nível.
 * C) Encontre a chave máxima da árvore, indicando seu nível.
 * D) Imprima a árvore de busca na saída padrão, nível a nível.
 **/

/**
 * Formato retirado do link no problema: https://www.ime.usp.br/~pf/algoritmos/aulas/binst.html
**/
typedef bin_tree map {
   number id;
   number value;
   bin_tree *esq, *dir; 
}

/**
 * Auxiliar para a criação de árvore.
**/
function insert (bin_tree r, bin_tree *new) {  
    if (r == NULL) { return new; } endif
    if (r.id > new.id) {
        r.esq = insert(r.esq, new);
    } else {
        r.dir = insert(r.dir, new);
    } endif
    return r;
} end

/**
 * Value acaba sendo usado pra nada no programa...
**/
function createTree(number[] values): bin_tree {
    bin_tree tree;
    if (values.length > 0) {
	    tree.id = values[0];
    	tree.value = 0;

        for (number i = 1; i < values.length; i++) {
            bin_tree* new;
            new.id = values[i];
            new.value = i;

            tree = insert(tree, new);
        } endfor
    } endif
    
    return tree;
} end

function minId(bin_tree tree): number[] {
    bin_tree* index = tree;
    number level = 0;
    while (index.esq) {
        index = index.esq;
        level++;
    } endwhile

    number[] min = [index.id, level];
    return min;
} end

function maxId(bin_tree tree): number[] {
    bin_tree* index = tree;
    number level = 0;
    while (index.dir) {
        index = index.dir;
        level++;
    } endwhile

    number[] max = [index.id, level];
    return max;
} end

procedure printTree(bin_tree tree, number level) {
    print("Nível: " + level + "\nChave: " + tree.id + "\nValor: " + tree.value + "\n");
    if (tree.esq) printTree(tree.esq, level++);
    if (tree.dir) printTree(tree.dir, level++);
} end

start () {
    number[] nums = [5, 10, 2, 35, 20, 24, 48, 9];
    bin_tree tree = createTree(nums);
    print("Impressao da arvore:\n");
    printTree(tree);

    number[] min = minId(tree);
    number[] max = maxId(tree);

    print("Chave minima: " + min[0] + ", nivel: " + min[1] + "\n");
    print("Chave maxima: " + max[0] + ", nivel: " + max[1] + "\n");
} end